<Type Name="ToolBar+ToolBarButtonCollection" FullName="System.Windows.Forms.ToolBar+ToolBarButtonCollection">
  <TypeSignature Language="C#" Value="public class ToolBar.ToolBarButtonCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ToolBar/ToolBarButtonCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Encapsulates a collection of <see cref="T:System.Windows.Forms.ToolBarButton" /> controls for use by the <see cref="T:System.Windows.Forms.ToolBar" /> class.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is a zero-based indexed collection used by the <xref:System.Windows.Forms.ToolBar> class to hold all the <xref:System.Windows.Forms.ToolBarButton> controls assigned to the toolbar. Use the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> method to add individual buttons and the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> method to delete them. Call the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> method to remove all the buttons from the collection.  
  
   
  
## Examples  
 The following code example creates and initializes a <xref:System.Windows.Forms.ToolBar> and three <xref:System.Windows.Forms.ToolBarButton> controls. The toolbar buttons are assigned to the toolbar and the toolbar is added to the form. This code requires that a <xref:System.Windows.Forms.Form> has already been created.  
  
 [!code-cpp[Classic ToolBar.Buttons Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.Buttons Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.Buttons Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToolBarButtonCollection (System.Windows.Forms.ToolBar owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ToolBar owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.#ctor(System.Windows.Forms.ToolBar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ToolBar" />
      </Parameters>
      <Docs>
        <param name="owner">The <see cref="T:System.Windows.Forms.ToolBar" /> that is the parent of the collection of <see cref="T:System.Windows.Forms.ToolBarButton" /> controls.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" /> class and assigns it to the specified toolbar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You do not typically create a <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> and explicitly call its constructor. By referencing the <xref:System.Windows.Forms.ToolBar.Buttons%2A> property of the <xref:System.Windows.Forms.ToolBar> control, a <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is created. You can then gain access to its properties and methods, and assign <xref:System.Windows.Forms.ToolBarButton> controls to the collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to display on the new <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Adds a new toolbar button to the end of the toolbar button collection with the specified <see cref="P:System.Windows.Forms.ToolBarButton.Text" /> property value.</summary>
        <returns>The zero-based index value of the <see cref="T:System.Windows.Forms.ToolBarButton" /> added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also add new <xref:System.Windows.Forms.ToolBarButton> objects to the collection by using the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> or <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> methods, or the other version of the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> method.  
  
 To remove a <xref:System.Windows.Forms.ToolBarButton> that you have previously added, use the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> or <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> methods.  
  
   
  
## Examples  
 The following code example removes an existing <xref:System.Windows.Forms.ToolBarButton> from a <xref:System.Windows.Forms.ToolBar> control if it exists and adds and inserts four new <xref:System.Windows.Forms.ToolBarButton> objects to the <xref:System.Windows.Forms.ToolBar>. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ToolBar> control on it.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to be added after all existing buttons.</param>
        <summary>Adds the specified toolbar button to the end of the toolbar button collection.</summary>
        <returns>The zero-based index value of the <see cref="T:System.Windows.Forms.ToolBarButton" /> added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also add new <xref:System.Windows.Forms.ToolBarButton> objects to the collection by using the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> or <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> methods, or the other version of the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> method.  
  
 To remove a <xref:System.Windows.Forms.ToolBarButton> that you have previously added, use the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> or <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> methods.  
  
   
  
## Examples  
 The following code example adds a new <xref:System.Windows.Forms.ToolBarButton> control to an existing <xref:System.Windows.Forms.ToolBar> with existing buttons. The toolbar button will be added to the end of the <xref:System.Windows.Forms.ToolBar.Buttons%2A?displayProperty=fullName> collection.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Windows.Forms.ToolBarButton[] buttons);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Windows.Forms.ToolBarButton[] buttons) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange(System.Windows.Forms.ToolBarButton[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buttons" Type="System.Windows.Forms.ToolBarButton[]" />
      </Parameters>
      <Docs>
        <param name="buttons">The collection of <see cref="T:System.Windows.Forms.ToolBarButton" /> controls to add to this <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" /> contained in an array.</param>
        <summary>Adds a collection of toolbar buttons to this toolbar button collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.ToolBarButton> objects contained in the `nodes` array are appended to the end of the collection.  
  
 You can use method to quickly add a group of previously created <xref:System.Windows.Forms.ToolBarButton> objects to the collection instead of manually adding each <xref:System.Windows.Forms.ToolBarButton> to the collection using the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> method.  
  
 To remove a <xref:System.Windows.Forms.ToolBarButton> that you have previously added, use the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> or <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> methods.  
  
   
  
## Examples  
 The following code example removes an existing <xref:System.Windows.Forms.ToolBarButton> from a <xref:System.Windows.Forms.ToolBar> control if it exists and adds and inserts four new <xref:System.Windows.Forms.ToolBarButton> objects to the <xref:System.Windows.Forms.ToolBar>. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ToolBar> control on it.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all buttons from the toolbar button collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> method iterates through the collection and removes all toolbar buttons assigned to the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 To remove an individual toolbar button from the collection, use the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> or <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> methods.  
  
 To add new <xref:System.Windows.Forms.ToolBarButton> objects to the collection, use the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> or <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> methods.  
  
   
  
## Examples  
 The following code example displays the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> of the <xref:System.Windows.Forms.ToolBar.Buttons%2A> before and after the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> method is called. This code requires that a <xref:System.Windows.Forms.ToolBar> with at least one <xref:System.Windows.Forms.ToolBarButton> has been created.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Contains(System.Windows.Forms.ToolBarButton)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to locate in the collection.</param>
        <summary>Determines if the specified toolbar button is a member of the collection.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Windows.Forms.ToolBarButton" /> is a member of the collection; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method enables you to determine whether a <xref:System.Windows.Forms.ToolBarButton> is member of the collection before attempting to perform operations on the <xref:System.Windows.Forms.ToolBarButton>. You can use this method to confirm that a <xref:System.Windows.Forms.ToolBarButton> has been added to or is still a member of the collection.  
  
   
  
## Examples  
 The following code example removes an existing <xref:System.Windows.Forms.ToolBarButton> from a <xref:System.Windows.Forms.ToolBar> control if it exists and adds and inserts four new <xref:System.Windows.Forms.ToolBarButton> objects to the <xref:System.Windows.Forms.ToolBar>. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ToolBar> control on it.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.ContainsKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the <see cref="T:System.Windows.Forms.ToolBarButton" /> to search for.</param>
        <summary>Determines if a <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key is contained in the collection.</summary>
        <returns>
          <see langword="true" /> to indicate a <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key is found; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.ToolBarButton.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.ToolBarButton> in the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 The key comparison is not case-sensitive. If the `key` parameter is `null` or an empty string, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> returns `false.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of buttons in the toolbar button collection.</summary>
        <value>The number of the <see cref="T:System.Windows.Forms.ToolBarButton" /> controls assigned to the toolbar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> property holds the actual number of <xref:System.Windows.Forms.ToolBarButton> controls assigned to the collection. It is common to use the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> property value as the upper bounds of a loop to iterate through a collection. The index value of a collection is a zero-based index, so you must subtract one from the looping variable otherwise you will exceed the upper bounds of the collection and throw an exception.  
  
   
  
## Examples  
 The following code example displays the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> of the <xref:System.Windows.Forms.ToolBar.Buttons%2A> before and after the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> method is called. This code requires that a <xref:System.Windows.Forms.ToolBar> with at least one <xref:System.Windows.Forms.ToolBarButton> has been created.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that can be used to iterate through the toolbar button collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> that represents the tree node collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example removes an existing <xref:System.Windows.Forms.ToolBarButton> from a <xref:System.Windows.Forms.ToolBar> control if it exists and adds and inserts four new <xref:System.Windows.Forms.ToolBarButton> objects to the <xref:System.Windows.Forms.ToolBar>. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ToolBar> control on it.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOf(System.Windows.Forms.ToolBarButton)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to locate in the collection.</param>
        <summary>Retrieves the index of the specified toolbar button in the collection.</summary>
        <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method gives you easy access to the index value of the <xref:System.Windows.Forms.ToolBarButton> in the collection. The index value allows you to easily determine which <xref:System.Windows.Forms.ToolBarButton> was clicked on the <xref:System.Windows.Forms.ToolBar>. The <xref:System.Windows.Forms.ToolBarButton> clicked can be determined by evaluating the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOf%2A> value of the <xref:System.Windows.Forms.ToolBarButtonClickEventArgs.Button%2A?displayProperty=fullName> property.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Windows.Forms.ToolBar> and three <xref:System.Windows.Forms.ToolBarButton> controls. The toolbar buttons are assigned to the button collection, the collection is assigned to the toolbar, and the toolbar is added to the form. On the <xref:System.Windows.Forms.ToolBar.ButtonClick> event of the toolbar, the <xref:System.Windows.Forms.ToolBarButtonClickEventArgs.Button%2A> property of the <xref:System.Windows.Forms.ToolBarButtonClickEventArgs> is evaluated, and the appropriate dialog box opened. This code requires that a <xref:System.Windows.Forms.Form>, an <xref:System.Windows.Forms.OpenFileDialog>, a <xref:System.Windows.Forms.SaveFileDialog>, and a <xref:System.Windows.Forms.PrintDialog> have all been created.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOfKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the <see cref="T:System.Windows.Forms.ToolBarButton" /> to search for.</param>
        <summary>Retrieves the index of the first occurrence of a <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key.</summary>
        <returns>The index of the first occurrence of a <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key, if found; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOfKey%2A> is called successively, the last returned index will be checked for a key match first, and if there is no match, the search starts at the beginning of the collection.  
  
 The <xref:System.Windows.Forms.ToolBarButton.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.ToolBarButton> in the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 The key comparison is not case-sensitive. If the `key` parameter is `null` or an empty string, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> returns -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert(System.Int32,System.Windows.Forms.ToolBarButton)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location within the collection to insert the toolbar button.</param>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to insert.</param>
        <summary>Inserts an existing toolbar button in the toolbar button collection at the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also add new <xref:System.Windows.Forms.ToolBarButton> objects to the collection by using the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> or <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> methods.  
  
 To remove a <xref:System.Windows.Forms.ToolBarButton> that you have previously added, use the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> or <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> methods.  
  
   
  
## Examples  
 The following code example removes an existing <xref:System.Windows.Forms.ToolBarButton> from a <xref:System.Windows.Forms.ToolBar> control if it exists and adds and inserts four new <xref:System.Windows.Forms.ToolBarButton> objects to the <xref:System.Windows.Forms.ToolBar>. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ToolBar> control on it.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the collection is read-only.</summary>
        <value>
          <see langword="true" /> if the collection is read-only; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example removes an existing <xref:System.Windows.Forms.ToolBarButton> from a <xref:System.Windows.Forms.ToolBar> control if it exists and adds and inserts four new <xref:System.Windows.Forms.ToolBarButton> objects to the <xref:System.Windows.Forms.ToolBar>. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ToolBar> control on it.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ToolBarButton this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolBarButton Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolBarButton</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location of the <see cref="T:System.Windows.Forms.ToolBarButton" /> in the collection.</param>
        <summary>Gets or sets the toolbar button at the specified indexed location in the toolbar button collection.</summary>
        <value>A <see cref="T:System.Windows.Forms.ToolBarButton" /> that represents the toolbar button at the specified indexed location.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To assign <xref:System.Windows.Forms.ToolBarButton> controls to a specific location, or to retrieve them from the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>, you can reference the collection object with a specific index value. The index value of the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is a zero-based index.  
  
   
  
## Examples  
 The following code example replaces the last toolbar button on a toolbar. This code requires that a <xref:System.Windows.Forms.ToolBar> and at least one <xref:System.Windows.Forms.ToolBarButton> have been created. The example gets the number of buttons on the toolbar and replaces the last button with a newly created one. The `index` value of the toolbar button being replaced is set to the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> property, minus one, since the <xref:System.Windows.Forms.ToolBarButton> collection is a zero-based index.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="index" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> value is less than zero.  
  
 -or-  
  
 The <paramref name="index" /> value is greater than the number of buttons in the collection, and the collection of buttons is not <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ToolBarButton this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolBarButton Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item(System.String)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolBarButton</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the <see cref="T:System.Windows.Forms.ToolBarButton" /> to retrieve.</param>
        <summary>Gets a <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key from the collection.</summary>
        <value>The <see cref="T:System.Windows.Forms.ToolBarButton" /> whose <see cref="P:System.Windows.Forms.ToolBarButton.Name" /> property matches the specified key.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.ToolBarButton.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.ToolBarButton> in the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 The key comparison is not case-sensitive. If the `key` parameter is `null` or an empty string, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> returns `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove(System.Windows.Forms.ToolBarButton)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to remove from the collection.</param>
        <summary>Removes a given button from the toolbar button collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To remove toolbar buttons from the collection, use the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A>, or <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> methods.  
  
 To add new <xref:System.Windows.Forms.ToolBarButton> objects to the collection, use the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> or <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> methods.  
  
   
  
## Examples  
 The following code example removes an existing <xref:System.Windows.Forms.ToolBarButton> from a <xref:System.Windows.Forms.ToolBar> control if it exists and adds and inserts four new <xref:System.Windows.Forms.ToolBarButton> objects to the <xref:System.Windows.Forms.ToolBar>. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ToolBar> control on it.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location of the <see cref="T:System.Windows.Forms.ToolBarButton" /> in the collection.</param>
        <summary>Removes a given button from the toolbar button collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> method removes the <xref:System.Windows.Forms.ToolBarButton> at the specified location in the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>. If you want to remove all <xref:System.Windows.Forms.ToolBarButton> controls from the collection, use the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> method.  
  
   
  
## Examples  
 The following code example removes the last <xref:System.Windows.Forms.ToolBarButton> on a <xref:System.Windows.Forms.ToolBar>. The index value of the toolbar button being removed is set equal to the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> property, minus one, since the <xref:System.Windows.Forms.ToolBarButton> collection is a zero-based index.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> value is less than 0, or it is greater than the number of buttons in the collection.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveByKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the <see cref="T:System.Windows.Forms.ToolBarButton" /> to remove from the collection.</param>
        <summary>Removes the <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.ToolBarButton.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.ToolBarButton> in the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
        <param name="index">The zero-based index in <c>dest</c> at which copying begins.</param>
        <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is cast to an <xref:System.Collections.ICollection> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
        <value>
          <see langword="false" /> in all cases.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is cast to an <xref:System.Collections.ICollection> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize access to the collection of buttons.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is cast to an <xref:System.Collections.ICollection> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Add(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to be added after all existing buttons.</param>
        <summary>Adds the specified toolbar button to the end of the toolbar button collection.</summary>
        <returns>The zero-based index value of the <see cref="T:System.Windows.Forms.ToolBarButton" /> added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="button" /> is not a <see cref="T:System.Windows.Forms.ToolBarButton" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">The item to locate in the collection.</param>
        <summary>Determines whether the collection contains a specific value.</summary>
        <returns>
          <see langword="true" /> if the item is found in the collection; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">The item to locate in the collection.</param>
        <summary>Determines the index of a specific item in the collection.</summary>
        <returns>The index of <paramref name="button" /> if found in the list; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location within the collection to insert the toolbar button.</param>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to insert.</param>
        <summary>Inserts an existing toolbar button in the toolbar button collection at the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="button" /> is not a <see cref="T:System.Windows.Forms.ToolBarButton" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the collection has a fixed size.</summary>
        <value>
          <see langword="false" /> in all cases.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the element to get or set.</param>
        <summary>Gets or sets the item at a specified index.</summary>
        <value>The element at the specified index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
        <summary>Removes the first occurrence of an item from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
