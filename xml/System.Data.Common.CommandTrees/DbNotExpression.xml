<Type Name="DbNotExpression" FullName="System.Data.Common.CommandTrees.DbNotExpression">
  <TypeSignature Language="C#" Value="public sealed class DbNotExpression : System.Data.Common.CommandTrees.DbUnaryExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DbNotExpression extends System.Data.Common.CommandTrees.DbUnaryExpression" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.CommandTrees.DbNotExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.CommandTrees.DbUnaryExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the logical NOT of a single <see langword="Boolean" /> argument. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.Common.CommandTrees.DbNotExpression> requires that its argument has a `Boolean` result type.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (System.Data.Common.CommandTrees.DbExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class System.Data.Common.CommandTrees.DbExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.DbNotExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Data.Common.CommandTrees.DbExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
        <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="visitor" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public override TResultType Accept&lt;TResultType&gt; (System.Data.Common.CommandTrees.DbExpressionVisitor&lt;TResultType&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResultType Accept&lt;TResultType&gt;(class System.Data.Common.CommandTrees.DbExpressionVisitor`1&lt;!!TResultType&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResultType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="System.Data.Common.CommandTrees.DbExpressionVisitor&lt;TResultType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResultType">The type of the result produced by <c>visitor</c>.</typeparam>
        <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
        <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
        <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="visitor" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
