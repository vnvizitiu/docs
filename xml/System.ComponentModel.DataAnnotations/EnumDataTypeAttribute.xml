<Type Name="EnumDataTypeAttribute" FullName="System.ComponentModel.DataAnnotations.EnumDataTypeAttribute">
  <TypeSignature Language="C#" Value="public sealed class EnumDataTypeAttribute : System.ComponentModel.DataAnnotations.DataTypeAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EnumDataTypeAttribute extends System.ComponentModel.DataAnnotations.DataTypeAttribute" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Annotations</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.DataAnnotations</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.DataAnnotations.DataTypeAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enables a .NET Framework enumeration to be mapped to a data column.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This class lets you map the underlying value in a column to a corresponding enumeration constant name. This lets you define an enumeration that contains descriptive values that correspond to database values, and then use the enumeration constant names instead of the database values when data is displayed.  
  
   
  
## Examples  
 The following example shows how to replace the numeric value of an enumeration with the corresponding declaration.  
  
```csharp  
public enum eReorderLvl {  
        zero = 0,  
        five = 5,  
        ten=10,  
        fifteen=15,  
        twenty=20,  
        twenty_five=25,  
        thirty=30  
    }  
    [MetadataType(typeof(Product_MD))]  
    public partial class Product {  
        public class Product_MD {  
            [EnumDataType(typeof(eReorderLvl))]  
            public object ReorderLevel { get; set; }  
        }  
    }  
```  
  
```vb  
Imports Public Enum eReorderLvl  
    zero = 0  
    five = 5  
    ten = 10  
    fifteen = 15  
    twenty = 20  
    twenty_five = 25  
    thirty = 30  
End Enum  
<MetadataType(GetType(Product_MD))>  _  
Public Class Product  
    Public Class Product_MD  
        <EnumDataType(GetType(eReorderLvl))>  _  
        Public Property ReorderLevel As Object  
        End Property  
    End Class  
End Class  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnumDataTypeAttribute (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.#ctor(System.Type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Annotations</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.DataAnnotations</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType">The type of the enumeration.</param>
        <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumType">
      <MemberSignature Language="C#" Value="public Type EnumType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EnumType" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.EnumType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Annotations</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.DataAnnotations</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the enumeration type.</summary>
        <value>The enumeration type.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public override bool IsValid (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValid(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.IsValid(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Annotations</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.DataAnnotations</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The data field value to validate.</param>
        <summary>Checks that the value of the data field is valid.</summary>
        <returns>
          <see langword="true" /> if the data field value is valid; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
